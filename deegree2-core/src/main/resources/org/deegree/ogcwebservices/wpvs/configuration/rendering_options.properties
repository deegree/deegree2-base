#$HeadURL: svn+ssh://developername@svn.wald.intevation.org/deegree/base/trunk/src/org/deegree/ogcwebservices/wpvs/configuration/rendering_options.properties $
####################################################################################
#
# This file is part of deegree.
# Copyright (C) 2001-2008 by:
# EXSE, Department of Geography, University of Bonn
# http://www.giub.uni-bonn.de/deegree/
# lat/lon GmbH
# http://www.lat-lon.de
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
# Contact:
# 
# Andreas Poth
# lat/lon GmbH
# Aennchenstr. 19
# 53177 Bonn
# Germany
# E-Mail: poth@lat-lon.de
# 
# Prof. Dr. Klaus Greve
# Department of Geography
# University of Bonn
# Meckenheimer Allee 166
# 53115 Bonn
# Germany
# E-Mail: greve@giub.uni-bonn.de
# 
# @version $Revision: 20601 $
# @author <a href="mailto:bezema@lat-lon.de">Rutger Bezema</a>
# @author last edited by: $Author: rbezema $
# 
# $Revision: 20601 $, $Date: 2009-11-05 16:25:55 +0100 (Do, 05 Nov 2009) $
# 
###################################################################################
#
# these values can be used to adjust the rendering of terrains and textures
#####
#blendingfunction, defines the way the terrain primitive colors and textures are rendered onto each other
## allowed values are (C'=outgoing color, C=Color, t=target, a=alpha):
# 1) MODULATE -> C' = C Ct (Default)
# 2) BLEND -> C'rgb = Crgb*(1 - Ctrgb) + Cbrgb*Ctrgb and C'a = Ca Ct
# 3) DECAL -> C'rgb = Crgb*(1 - Cta) + Ctrgb*Cta     and C'a = C
# 4) COMBINE -> further values need to be set(below)
#####
blend_function=MODULATE
#####
#blending_color, (Applies only to blend_function=BLEND) defines the constant color to blend with 
## allowed values are 
# 1) any one of the rgba parameters between >=0 and <=1. (default= 0,0,0,0)
#####
blend_color=0,0,0,0
#####
#combinefunction, defines the way the terrain primitive colors and textures are rendered onto each other
## allowed values are:
# 1) COMBINE_REPLACE -> C' = C0
# 2) COMBINE_MODULATE -> C' = C0 C1 (Default) 
# 3) COMBINE_ADD -> C' = C0 + C1
# 4) COMBINE_ADD_SIGNED -> C' = C0 + C1 - 0.5
# 5) COMBINE_SUBTRACT -> C' = C0 - C1
# 6) COMBINE_INTERPOLATE -> C' = C0 C2 + C1 (1 - C2)
# 7) COMBINE_DOT3 -> C' = 4 * ( (C0r - 0.5) * (C1r - 0.5) + (C0g - 0.5) * (C1g - 0.5) + (C0b - 0.5) * (C1b - 0.5))
#####
combine_function_rgb=COMBINE_ADD_SIGNED
combine_function_alpha=COMBINE_MODULATE
#combine_color_source, defines the source for a color operand (the 0, 1 or 2 ) in the combine operation
## allowed values are:
# 1) COMBINE_OBJECT_COLOR 
# 2) COMBINE_TEXTURE_COLOR (Default)
# 3) COMBINE_PREVIOUS_TEXTURE_UNIT_STATE (Default2)
# 3) COMBINE_CONSTANT_COLOR (Default3)
#####
combine_color_source_rgb_0=COMBINE_TEXTURE_COLOR
combine_color_source_rgb_1=COMBINE_PREVIOUS_TEXTURE_UNIT_STATE
combine_color_source_rgb_2=COMBINE_CONSTANT_COLOR
combine_color_source_alpha_0=COMBINE_TEXTURE_COLOR
combine_color_source_alpha_1=COMBINE_PREVIOUS_TEXTURE_UNIT_STATE
combine_color_source_alpha_2=COMBINE_CONSTANT_COLOR
#combine_color_function_rgb, specifies the function for a color operand in the combine operation
## allowed values are:
# 1) COMBINE_SRC_COLOR - the color function is f = Crgb (default)
# 2) COMBINE_ONE_MINUS_SRC_COLOR - the color function is f = (1 - Crgb ) 
#####
combine_color_function_rgb=COMBINE_SRC_COLOR
#combine_color_function_alpha, specifies the function for a alpha operand in the combine operation
## allowed values are:
# 1) COMBINE_SRC_ALPHA - the color function is f = Ca
# 2) COMBINE_ONE_MINUS_SRC_ALPHA - the color function is f = (1 - Ca)
#####
combine_color_function_alpha=COMBINE_SRC_ALPHA
#combine_scale, pecifies the scale factor to be applied to the output color of the combine operation. 
## allowed values are:
# 1) 1 (default)
# 2) 2
# 3) 4
#####
combine_scale_factor_rgb=1
combine_scale_factor_alpha=1

#####
#shading_model, defines the shading technique used
## allowed values are:
# 1) SHADE_FLAT //for simple shading
# 2) SHADE_GOURAUD //for better shading (Default)
#####
shading_model=SHADE_GOURAUD
#####
#shading_quality, defines the (hinted) shading quality
## allowed values are:
# 1) FASTEST //for simple, not very good shading 
# 2) NICEST //for better shading (Default)
#####
shading_quality=NICEST

#####
#object_shading_enabled, defines if objects should have shading, e.g. react to the light. 
## allowed values are:
# 1) TRUE //for shading (Default)
# 2) FALSE //no shading 
#####
object_shading_enabled=TRUE

#####
#terrain_culling, can be used to cull (not draw) back or front facing terrainprimitives, resulting in higher rendering speed
## allowed values are:
# 1) BACK //Primitives with backfacing normals are culled
# 2) FRONT //Primitives with frontfacing normals are culled
# 3) NONE //no Primitives are culled (Default)
#####
terrain_culling=NONE
#####
#terrain_backflip, can be used to invert backfacing terrain primitives.
## allowed values are:
# 1) TRUE //the backfacing normals of terrains should be flipped (Default)
# 2) FALSE //the backfacing normals of terrains should be flipped
#####
terrain_backflip=TRUE
#####
#terrain_texture_mipmapping, can be used to create a mipmap of terrain textures
## allowed values are:
# 1) TRUE //create and render mipmapped terrain textures (Default)
# 2) FALSE //don'tcreate and render mipmapped terrain textures
#####
terrain_texture_mipmapping=TRUE
#####
#terrain_texture_filter, can be used to define the behavior of the min and max filtering of textures
## allowed values are:
# 1) FASTEST //uses the fastest available method for processing geometry.
# 2) NICEST //uses the nicest available method for processing geometry
# 3) BASE_LEVEL_POINT // selects the nearest texel in the base level texture image
# 4) BASE_LEVEL_LINEAR  // performs a bilinear interpolation on the four nearest texels in the base level texture image
# 5) LINEAR_SHARPEN // sharpens the resulting image by extrapolating from the base level plus one image to the base level image of this texture object
# 6) LINEAR_SHARPEN_RGB // performs linear sharpen filter for the rgb components only. The alpha component is computed using BASE_LEVEL_LINEAR filter
# 7) LINEAR_SHARPEN_ALPHA // performs linear sharpen filter for the alpha component only. The rgb components are computed using BASE_LEVEL_LINEAR filter.
# 8) FILTER4 // applies an application-supplied weight function on the nearest 4x4 texels in the base level texture image
#####
terrain_texture_filter=NICEST
#####
#terrain_texture_perspective_correction, defines the (hinted) texture mapping mode
## allowed values are:
# 1) FASTEST //for fast but simple, not very good mapping
# 2) NICEST //for better mapping (Default)
#####
terrain_texture_perspective_correction=NICEST
#####
#terrain_anisotropic_filter, defines the (hinted) texture anisotropic filtering mode
## allowed values are:
# 1) NONE //for no anisotropic filtering
# 2) SINGLE_VALUE //for anisotropic filtering (Default)
#####
terrain_anisotropic_filter=SINGLE_VALUE

#####
#use_terrain_shading, defines if terrain should have shades (react to the light) 
## allowed values are:
# 1) TRUE //for shading (Default)
# 2) FALSE //no shading 
#####
terrain_shading_enabled=TRUE

#####
#surface_culling, can be used to cull (not draw) back or front facing surfaces, resulting in higher rendering speed
## allowed values are:
# 1) BACK //Primitives with backfacing normals are culled
# 2) FRONT //Primitives with frontfacing normals are culled
# 3) NONE //no Primitives are culled (Default)
#####
surface_culling=NONE
#####
#surface_backflip, can be used to invert backfacing surface primitives (like walls).
## allowed values are:
# 1) TRUE //the backfacing normals of surfaces should be flipped (Default)
# 2) FALSE //the backfacing normals of surfaces should be flipped
#####
surface_backflip=TRUE